SQL은 데이터를 읽고, 저장하고, 변경하고, 삭제하는 구체적인 문법이다. SQL 작성이 단순하고 반복적인데, 실수하기는 쉽다.그래서 ORM을 
이용하여 더 편하게 SQL을 사용할 수 있다. 물론 ORM이 없어도 웹서버 개발을 할 수 있지만, 그럴경우 백엔드 개발자가 비즈니스 로직 개발보다 
SQL 작성에 더 많은 노력을 들여야 한다. MVC(Model - View - Controller)는 디자인 패턴으로 두가지 경우가 있다. 서버에서 HTML을 내려주는데 
정적 웹페이지의 경우 클라이언트의 요청을 모델로 받아 처리하고 클라이언트에게 뷰를 내려준다. 동적 웹페이지의 경우 클라이언트의 요청을 모델로 받아
처리하고, 템플릿 엔진에 뷰와 모델을 전달하여, 템플릿엔진은 받은 뷰에 모델을 적용하여 웹페이지를 생성한다. 그리고 클라이언트에 뷰를 내려주면, 
클라이언트는 뷰를 사용자에게 보여준다.

이번주는 스프링 시큐리티를 이용한 로그인, 회원가입을 만들었다. 처음 공부하는 부분이고, 복잡한 내용이어서 자료를 여러번 보면서 기능을 
만들어야 했다. 또 jwt를 이용해 토큰을 만들고, 권한을 설정하는 작업을 했다. 사실 이부분이 이해하기가 너무 어려웠다. 사실 지금도 큰 흐름
정도만 이해하고 자세한 부분은 하나도 모른다는게 맞는것 같다. 먼저 토큰을 만들어서 각 클라이언트에 저장하고, 클라이언트는 무언가
요청할 때마다 그 토큰을 함께 보낸다. 그러면 인증매니저에서 토큰을 검사하고, 검증되면 서버로 요청을 보낸다. 요청을 받은 서버는 그 기능을
처리하고, 반환한다. 클라이언트에서 반환받은 값을 보여준다. 그 과정에서 코드는 Filter - Provider - Handler - Decoder가 사용되는데, 
Filter는 정보를 받아서 인증에 적합한 형태(타입)로 만들어서 인증을 요청한다. 그러면 Provider가 인증 요청받은 인증처리를 진행한다. 그 후
Handler는 인증 성공시 response에 담아(헤더나 바디에 담음)준다. Decoder는 토큰의 복호화를 진행하여 문제가없는지 체크하고, 기간이 만료되지 
않았는지 체크한다. 전체적으로 이러한 과정들이 있는데 각 역할을 하는 부분들이 아직 미숙해서 더 공부해봐야할것 같다.

금요일 되서부터는 혼자 작업하는것이 아니라 팀원과의 협업이 주요한 부분이었다. 그래서 멈춰있던 깃 공부를 다시 할수 있게되었다. 깃을 활용한 협업은
크게 이슈를 만들어 내용에 대해 토론하고 발전시킨다. 그리고 각 기능별 브랜치를 만들어 각각의 작업공간에서 작성해나간다. 그 과정에서 중간중간에
커밋을 주어 전체적으로 어떻게 만들어지는지 히스토리를 만들어 나간다. 그리고 메인 브랜치에 각 브랜치를 머지(병합)시켜 협업을 완성하는 것이다. 
아직 제대로 시작하지도 못하였지만 분명 어딘가에서 충돌에러나 무슨 에러가 나올것이고, 침착하게 그 부분들을 처리할 수 있도록 해봐야겠다.
