Inversion of Control이란 직역하면 제어반전이란 뜻으로 객체의 생성부터 생명주기관리까지 모든 객체의 제어권이 바뀌었다는 것을 의미한다.
IoC는 구성요소 의존성 관계 설정, 구성 및 생명주기를 해결하기 위해 만들어진 디자인 패턴이다. 컨테이너는 보통 객체의 생명주기관리, 
생성된 인스턴스에 추가 기능을 제공하는것이다.

IoC컨테이너란 스프링 프레임워크에서 객체의 생성관리, 의존성 관리를 해주는 컨테이너이다. 객체관리 주체가 프레임워크가 되기 때문에 
개발자는 비지니스 로직에 집중할 수 있다. 개발자들이 직접 POJO를 생성하지 않고 컨테이너가 POJO의 생성, 초기화, 서비스, 소멸에 대한 
권한을 가진다. 또 객체 생성 코드가 없으므로 TDD가 용이하다.
POJO(Plain Old Java Object)는 주로 특정 자바 모델이나 기능, 프레임워크를 따르지 않는 Java Object(ex: Java Bean 객체)를 지칭한다.

IoC는 DL(Dependency Lookup) 과 DI (Dependency Injection)로 분류된다. DL은 저장소에 있는 빈에 접근하기 위해 컨테이너가 
제공하는 API를 통해 빈을 조회한다. 의존성 조회를 사용하면 종속이 증가하기 때문에 DI를 사용한다. DI는 클래스 간의 의존 관계를 빈 
설정을 바탕으로 컨테이너가 자동으로 연결해준다. 의존성 주입은 생성자 주입(Constructor Injection) , 필드 주입(Method Injection), 
수정자 주입(Setter Injection)이 있다.

스프링 컨테이너가 관리하는 객체를 빈이라고 하고, 이 빈들을 관리한다는 의미로 컨테이너를 빈 팩토리라고 한다. 빈 팩토리에 여러가지 
컨테이너 기능을 추가한 어플리케이션컨텍스트(ApplicationContext) 가 있다. 빈팩토리 계열의 인터페이스는 컨테이너에서 객체를 생성하고 
DI를 처리하는 기능만 제공한다. 빈을 등록, 생성, 조회, 반환 관리하며, 빈 조회 getBean() 메소드가 정의되어 있다. 일반적으로 빈 팩토리를 
그냥 사용하지 않고 빈 팩토리를 확장한 애플리케이션 컨텍스트를 사용한다. 
애플리케이션 컨텍스트는 빈 팩토리와 같이 빈을 등록, 생성, 조회, 반환 관리하는 기능을 하며, 추가적으로 파일(ex: 이미지)을 로드할 수 있는 포괄적인 
방법을 제공한다. 또 국제화가 지원되는 텍스트 메시지를 관리 해주며, 리스너로 등록된 빈에게 이벤트 발생을 알려준다.
