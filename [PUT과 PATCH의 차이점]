PUT과 PATCH의 차이는 크게 두가지가 있다. 
첫번째는 PUT은 필드 전체를 교체, PATCH는 부분만 교체가 가능하다는 것이다. 만약에 PUT으로 수정값이 전체가 아닌 일부만 들어오게 된다면 null이나 초기값이 된다. PATCH는 자원을 교체할때 일부만 전달해도 그부분만 수정이 가능하다. 
예를 들어 {이름 : 홍길동, 나이 : 20세}라는 값을 수정할 때, PUT일 경우 {나이 : 17세}만 전달하면
{이름 : 홍길동, 나이 : 20세} -> {이름 : NULL, 나이 : 17세}가 되기 때문에 반드시 {이름 : 홍길동, 나이 : 17세}로 전달해야 한다.
PATCH의 경우 {나이 : 17세}만 전달해도 {이름 : 홍길동, 나이 : 20세} -> {이름 : 홍길동, 나이 : 17세}로 잘 바뀐다.

두번째는 PUT은 멱등성을 보장하지만 PATCH는 멱등성을 보장하지 않는다는 것이다. 멱등성이란 연산을 여러 번 반복하여도 한 번만 수행된 것과 같은 성질을 의미한다.
PUT은 전체를 "교체"해버리기 때문에 같은 요청을 한번 수행하든 100번 수행하든 결과는 같다. 하지만 PATCH는 두가지로 나뉠 수 있다.
1. 기존에 있던 값과 상관 없이 이 데이터를 넣어서 변경한다
2. 기존에 있던 값에 대해 이런 연산을 진행해서 이 데이터를 통해 데이터를 변경한다
1번의 경우 PATCH역시 기존값을 "교체"하기 때문에 멱등성이 성립한다. 하지만 2번의 경우 기존값을 유지하며 연산한값을 넣기때문에 멱등성이 성립하지 않는다.
예를 들어 {이름 : 홍길동, 나이 : 20세}라는 값을 PATCH로 수정할 때, {나이 : +10} 즉 요청할때마다 기존값에 나이를 10 더한다 라는 요청을 한다면
1번요청할경우 {이름 : 홍길동, 나이 : 30세}가 되겠지만, 만약 서버지연 오류로 100번 요청될 경우 {이름 : 홍길동, 나이 : 1020세}가 될것이다. 이 경우 멱등성이 성립하지 않는다.
