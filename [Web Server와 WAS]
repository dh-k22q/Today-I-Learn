먼저 DBMS(Database Management System)와 MiddleWare부터 아는 것이 좋다. DBMS는 여러 사용자들이 db의 데이터에 접근하게 해주는 
소프트웨어(MySQL, Oracle 등)이다. 이러한 DBMS에 직접 접근하여 이용하게 되면 클라이언트에 로직이 많아져야하고, 로직이 변경되면
다시 배포해야 하기 때문에 보안상의 문제가 생길 수 있다. 그렇기 때문에 클라이언트와 db서버 사이에 MiddleWare서버를 만들게 되었다.
클라이언트는 단순히 요청을 MiddleWare서버에 보내고, MiddleWare서버에서 대부분의 로직을 수행하며 데이터가 필요하면 DBMS에 데이터를 요청한다.
그렇게 만들어진 로직의 결과를 클라이언트에게 전달하면, 클라이언트가 그 결과를 화면에 보여준다.

이러한 미들웨어는 크게 Webserver와 WAS(Web Application Server)로 나뉜다.
웹서버는 하드웨어로 봤을때, 웹서버가 설치된 컴퓨터를 의미하고, 소프트웨어로 봤을땐 웹브라우저(클라이언트)의 http요청을 받아 정적인 
컨텐츠(html/jpeg/css등)를 제공하는 프로그램을 의미한다. 서버는 정적인 컨텐츠는 WAS를 거치지 않고 바로 제공할 수 있다. 하지만 동적인 
컨텐츠는 WAS에 요청을 보내고, WAS가 처리한 결과물을 클라이언트에게 보낸다.
WAS는 여러 로직의 처리나 DB의 조회를 요구하는 동적인 컨텐츠 제공을 위해 만들어진 서버이다.웹 컨테이너(Web Container)나 서블릿 
컨테이너(SErvlet Container)라고 불리며, JSP와 Servlet구동환경을 제공한다. 여러 개의 트랜잭션을 관리하고, 업무를 처리하는 비즈니스 
로직을 수행한다.

그렇다면 왜 웹서버와 WAS를 나눠서 사용할까? 만약 정적 컨텐츠 요청까지 WAS가 처리하면 부하가 커지게 되고, 동적 컨텐츠의 처리까지 지연되어 
수행 속도가 느려진다. 따라서 WAS를 통해 요청에 맞는 데이터를 DB에서 가져와서 비즈니스 로직에 맞게 결과를 만들어서 제공하면 자원을 
효율적으로 사용할 수 있다. 또 SSL(암호화 기반 인터넷 보안 프로토콜)에 대한 암복호화 처리에 웹서버를 사용하여 보안 수준을 높일 수 있다.
그리고 fail over(장애 극복), fail back 처리를 할떄, 특히 대용량 웹 어플리케이션(여러 개의 서버 사용)은 웹서버와 WAS를 분리하여 무중단 
운영을 위한 장애 극복에 쉽게 대응할 수 있다.(웹서버에서 오류가 난 WAS를 사용 못하게 만들고 WAS의 오류를 처리가능)
그래서 웹서버를 WAS 앞에 두고 Web Server에 플러그인으로 필요한 WAS를 설정하면 분산 처리를 할 수있다.
