절차지향 프로그래밍은 데이터와 기능으로 나누어서 기능의 목록을 절차적 으로 수행하는 것이다. 순차적인 처리가 중요시되고 프로그램 전체가 유기적으로 연결된다.
장점으로는 실행 속도가 빠르다는 것이다. 하지만 단점으로 모든 요소가 연결되어있어 하나가 고장났을 때 전체가 고장난다. 때문에 유지보수하는 과정이 매우 어렵다.
그리고 실행 순서가 정해져 있어 코드의 순서가 바뀔 시 결과가 다르게 나올 수 있다. 그렇기 때문에 프로그램의 함수가 많아질수록 상호작용에 대한 이해가 점점 어려워진다.

객체지향 프로그래밍은 변수와 메소드를 가진 독립적인 객체를 만들고 각각의 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 것이다.
특징으로는 크게 하나의 객체에 대해 특정한 목적을 위한 필요한 변수나 메소드를 하나로 묶는 캡슐화, 상위 클래스의 모든 걸 하위 클래스가 모두 이어받는 상속,
상속을 통해 같은 형태에서도 기능을 확장하고 변경하는 것을 가능하게 해주는 다형성, 객체의 공통적인 속성과 기능을 추출하여 정의하는 추상화가 있다.
객체지향의 장점으로는 상속을 통해 프로그래밍 시 코드의 재사용 률을 높일 수 있고, 잘 설계된 독립적인 객체를 사용함으로써 생산성을 높일 수 있다.
또 프로그램 수정을 할 때 추가, 수정을 하더라도 주변 영향이 적어 유지 보수가 쉽다는 장점이 있다.
단점으로는 개발 속도와 실행 속도가 느리고, 난이도가 높다는 점이 있다.

관점지향 프로그래밍은 객체지향을 대신하는 새로운 개념이 아니라, 기존 객체지향을 더욱 보완, 확장하여 사용할 수 있도록 도와주는 개념이다.
가장 기초가 되는 개념은 관심의 분리이다. 핵심관점(비즈니스 로직) + 횡단관점(트랜잭션, 로그, 권한 체크, 인증, 예외 처리 등)으로 
관심의 분리를 실현한다. 각 객체별로 처리했던 것을 각 관점별로 외부에서 접근하여 기능을 주입하는것이다. 관점지향으로 프로그래밍하면 
중복 코드 제거, 효율적인 유지보수, 높은 생산성, 재활용성 극대화, 변화 수용 용이 등의 장점이있다.

